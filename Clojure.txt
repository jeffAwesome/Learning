Today is September 7th 1:19pm

I took a few days off from playing with clojure. I dug into some javascript
testing. But I want to spend a little time on clojure today.

There is an empty? function. This is cool reminds me of ruby methods


We can check if a vector is empty by doing soething like this
1. Empty?
ex:  (empty? [:table :door :key])
Return: false

This of course will return false

ex: (empty? [])
Return: true
This will return true because the vector is empty

The cool thing is you can actually use this with maps and I think lists but lets
try first.

Yup you can do it with those check these examples out.

ex: (empty? {})
Return: true

ex: (empty? '())
Return true

This is cool because it looks like you can use the empty? function with all
the collection types

So Living Clojure page just mentioned something called seq. Apparently under the
hood empty is using it. The example was this

(defn empty? [col1] (not (seq col1)))

But what is seq. I understand its using a not so lets just look at this from
what we understand right now.

This method takes one argument the col1 argument. Which to me would mean
collection. Then lets check out the expressions from the innermost expression. 

(seq col1)

I'm not quite sure what seq would mean... so lets just assume that's true (?)
not really sure.

Then the not would check the value of the inner expression.. which would negate
whatever value was returned.

so if we do

(empty? [:3])

Were technically doing 

(not (seq [:3])

This would return false... so seq [:3] must return true.. and the not would
negate that, so we'd get false back... but anyway lets dig into what seq is.


Today is September 2nd 12:00 am

I can't sleep... so i'm going through some closure stuff..

Different types of collections in closure

1. List
ex:  '(:a :b :c)

This is a list with three keywords. (symbols in ruby  :) )
special properties of a list...
You can't access an index directly you have to do so using things like this

(first '(:a :b :c))
That would return :a

Or you can return b by doing this

(first (rest '(:a :b :c)))

This will return :b... but wwhy

Its because you call the rest operation which returns everything but the first
item in the list. You then pass that new value in and this time use the first
operation for the list :b :c... it will pull :b


2. Vector 
ex: [:a :b :c]

This is basically what I think of as an array. You can grab values directly
just like in an array... you just specify the index... 

(nth [:a :b :c] 1)

This will return :b .. remember all  vectors are 0 based

You can also call first, last, and rest operations

3. Maps
ex: {:a 'letter A' :b 'letter B' :c 'letter cd'}

This is a map... or hash in ruby or dictionary in python or object in javascript

It consists of a property and a value or key and value pairs

In this case the key is a keyword and the value is a string

You can get values by using the get operation like so


(get {:a 'letter a' :b 'letter b' :c 'letter c'} :b)

Or you can use the key like so

(:b {:a 'letter a' :b 'letter b' :c 'letter c'})


You can view all the keys by using the keys operation

(keys {:a 'letter a' :b 'letter b' :c 'letter c'})









Today is August 28th 2015

10:44pm -
  Been running through some python tutorials on codecademy. Mostly just review
of the language syntax. Ran into something interesting.

###Strings
So there are methods you can apply to a string like len()... but that's
interesting is you can apply that to other data types... you use it like so

len("charlie")

It would output the length

You also have methods like upper and lower.. .these belong to the String class.
You would call them like so

"Delta".upper()
"Echo".lower()

###String Formatting with %

The % operate after a string is used to combine a string with variables. The %
operator will replace a %s in the string with the string variable that comes
after it... FOr example

string_1 = "Camelot"
string_2 = "place"

print "Let's not go to %s. 'Tis a silly %s." % (string_1, string_2)
So this string would print as follows

Let's not go to Camelot. Tis a silly place.



### Functions

This is something I always mix up terminology on. 
A parameter is like (n) where n would be the paramter of the function definition
An argument is the value of an argument or put another way
A paramter acts as a variable name for a passed in argument


Functions take arguments but the placeholder in the function declaration or
definition is a paramter


#August 28th 2015 - 1:13 PM

#Lists

Some intere





Whoa... that's cool
